SPV_NVX_raytracing
==================

Name Strings
------------

SPV_NVX_raytracing

Contact
-------

See *Issues* list in the Khronos SPIRV-Headers repository:
https://github.com/KhronosGroup/SPIRV-Headers

Contributors
------------

- Eric Werness, NVIDIA
- Ashwin Lele, NVIDIA
- Daniel Koch, NVIDIA

Status
------

- Complete

Version
-------

[width="40%",cols="25,25"]
|========================================
| Last Modified Date | 2018-09-12
| Revision           | 1
|========================================

Dependencies
------------

This extension is written against the SPIR-V Specification,
Version 1.1 Revision 4.

This extension requires SPIR-V 1.0.

Overview
--------

This extension adds new functionality to support the Vulkan
VK_NVX_raytracing extensions in SPIR-V.

Extension Name
--------------

To use this extension within a SPIR-V module, the following
*OpExtension* must be present in the module:

----
OpExtension "SPV_NVX_raytracing"
----

New Execution Models
--------------------

This extension introduces new execution models:

----
RayGenerationNVX
IntersectionNVX
AnyHitNVX
ClosestHitNVX
MissNVX
CallableNVX
----

these depend on the *RaytracingNVX* capability.


New Capabilities
----------------

This extension introduces new capabilities:

----
RaytracingNVX
----

New Storage Classes
-------------------

Storage classes added under the *RaytracingNVX* capability

----
RayPayloadNVX
IncomingRayPayloadNVX
HitAttributeNVX
ShaderRecordBufferNVX
----

New Builtins
------------

Builtins added under the *RaytracingNVX* capability

----
LaunchIdNVX
LaunchSizeNVX
InstanceCustomIndexNVX
WorldRayOriginNVX
WorldRayDirectionNVX
ObjectRayOriginNVX
ObjectRayDirectionNVX
RayTminNVX
RayTmaxNVX
ObjectToWorldNVX
WorldToObjectNVX
HitTNVX
HitKindNVX
----

New Instructions
----------------

Instructions added under the *RaytracingNVX* capability

----
OpReportIntersectionNVX
OpIgnoreIntersectionNVX
OpTerminateRayNVX
OpTraceNVX
OpTypeAccelerationStructureNVX
----

Modifications to the SPIR-V Specification, Version 1.1
------------------------------------------------------

(Modify Section 2.2.2, Types ) ::
+
add *OpTypeAccelerationStructureNVX* to list of opaque types



(Modify Section 3.3, Execution Model, adding rows to the Execution Model table) ::
+
--
[cols="1^,12,15",options="header",width = "80%"]
|====
2+^.^| Execution Model | Enabling Capabilities
| 5313 | *RayGenerationNVX* +
Ray generation shading stage.
| *RaytracingNVX*
| 5314 | *IntersectionNVX*  +
Intersection shading stage.
| *RaytracingNVX*
| 5315 | *AnyHitNVX* +
Any hit shading stage.
| *RaytracingNVX*
| 5316 | *ClosestHitNVX* +
Closest hit shading stage.
| *RaytracingNVX*
| 5317 | *MissNVX* +
Miss shading stage.
| *RaytracingNVX*
| 5318 | *CallableNVX* +
Ray callable shading stage. +
Currently unimplemented.
| *RaytracingNVX*
|====
--

(Modify Section 3.7, Storage Class, adding rows to the Storage Class table) ::
+
--
[cols="1^,10,2*2",options="header",width = "100%"]
|====
2+^.^| Storage Class | <<Capability,Enabling Capabilities>> | Enabled by Extension
| 5338 | *RayPayloadNVX* +
Used for storing payload data associated with a ray. Visible across all functions in
the current invocation. Not shared externally. Variables declared
with this storage class can be both read and written to. Only allowed in *RayGenerationNVX*
,*AnyHitNVX*, *ClosestHitNVX* and *MissNVX* execution models.
| *RaytracingNVX* | SPV_NVX_raytracing
| 5339 | *HitAttributeNVX* +
Used for storing attributes of geometry intersected by a ray. Visible across all
functions in the current invocation. Not shared externally. Variables declared with this
storage class are allowed only in *IntersectionNVX*, *AnyHitNVX* and *ClosestHitNVX* execution models.
They can be written to only in *IntersectionNVX* execution model and read from only
in *AnyHitNVX* and *ClosestHitNVX* execution models.
| *RaytracingNVX* | SPV_NVX_raytracing
| 5342 | *IncomingRayPayloadNVX* +
Used for storing parent payload data associated with a ray in current stage invoked from
a trace call. Visible across all functions in current invocation. Not shared externally.
Variables declared with the storage class are allowed only in *AnyHitNVX*, *ClosestHitNVX* and
*MissNVX* execution models. Can be both read and written to in above execution models.
| *RaytracingNVX* | SPV_NVX_raytracing
| 5343 | *ShaderRecordBufferNVX* +
Used for storing data in shader record associated with each unique shader in raytracing
pipeline. Visible across all functions in current invocation. Can be initialized externally via API.
Variables declared with this storage class are allowed in *RayGenerationNVX*, *IntersectionNVX*,
*AnyHitNVX*, *ClosestHitNVX*, *MissNVX* and *CallableNVX* execution models and can be both read and written to
but cannot have initializers. Refer to raytracing chapter of Vulkan API specification for details on shader records.
| *RaytracingNVX* | SPV_NVX_raytracing
|====
--

(Modify Section 3.21, Builtin, adding rows to the Builtin table) ::
+
--
[cols="1^,10,6^,2*2",options="header",width = "100%"]
|====
2+^.^| Decoration | <<Capability,Enabling Capabilities>> 2+<.^| Extra Operands
| 5319 | *LaunchIdNVX* +
Index of work item being processed in current invocation of ray tracing shader stage.
Allowed in all ray tracing execution models.

Refer to raytracing chapter of Vulkan API specification for more details.
|*RaytracingNVX* 2+|
| 5320 | *LaunchSizeNVX* +
Width and height dimensions passed to vkCmdTraceRaysNVX call which resulted in invocation of
current ray tracing shader stage. Allowed in all ray tracing execution models.

Refer to raytracing chapter of Vulkan API specification for more details.
|*RaytracingNVX* 2+|
| 5321 | *WorldRayOriginNVX* +
World-space origin coordinates for the ray being traced in the *IntersectionNVX*,
*AnyHitNVX*, *ClosestHitNVX*, or *MissNVX* execution models.

Refer to raytracing chapter of Vulkan API specification for more details.
|*RaytracingNVX* 2+|
| 5322 | *WorldRayDirectionNVX* +
World-space direction for the ray being traced in the *IntersectionNVX*,
*AnyHitNVX*, *ClosestHitNVX*, or *MissNVX* execution models.

Refer to raytracing chapter of Vulkan API specification for more details.
|*RaytracingNVX* 2+|
| 5323 | *ObjectRayOriginNVX* +
Object-space origin coordinates for the ray being traced in the *IntersectionNVX*,
*AnyHitNVX*, *ClosestHitNVX*, or *MissNVX* execution models.

Refer to raytracing chapter of Vulkan API specification for more details.
|*RaytracingNVX* 2+|
| 5324 | *ObjectRayDirectionNVX* +
Object-space direction for the ray being traced in the *IntersectionNVX*,
*AnyHitNVX*, *ClosestHitNVX*, or *MissNVX* execution models.

Refer to raytracing chapter of Vulkan API specification for more details.
|*RaytracingNVX* 2+|
| 5325 | *RayTminNVX* +
The current *Tmin* parametric value for the ray being traced in the *IntersectionNVX*,
*AnyHitNVX*, *ClosestHitNVX*, or *MissNVX* execution models.

Refer to raytracing chapter of Vulkan API specification for more details.
|*RaytracingNVX* 2+|
| 5326 | *RayTmaxNVX* +
The current *Tmax* parametric value for the ray being traced in the *IntersectionNVX*,
*AnyHitNVX*, *ClosestHitNVX*, or *MissNVX* execution models.

Refer to raytracing chapter of Vulkan API specification for more details.
|*RaytracingNVX* 2+|
| 5327 | *InstanceCustomIndexNVX* +
Application specified value associated with the instance that was hit by the current ray in the *IntersectionNVX*,
*AnyHitNVX*, *ClosestHitNVX* execution models.

Refer to raytracing chapter of Vulkan API specification for more details.
|*RaytracingNVX* 2+|
| 5330 | *ObjectToWorldNVX* +
The _4x3_ object to world transformation matrix for the ray being traced in the *IntersectionNVX*,
*AnyHitNV*, or *ClosestHitNVX* execution models.

Refer to raytracing chapter of Vulkan API specification for more details.
|*RaytracingNVX* 2+|
| 5331 | *WorldToObjectNVX* +
The _4x3_ world to object transformation matrix for the ray being traced in the *IntersectionNVX*,
*AnyHitNV*, or *ClosestHitNVX* execution models.

Refer to raytracing chapter of Vulkan API specification for more details.
|*RaytracingNVX* 2+|
| 5332 | *HitTNVX* +
The parametric value *T* for the ray resulting in a hit for the ray being traced in the *AnyHitNVX* or
*ClosestHitNVX* execution models. This is an alias for RayTMaxNVX for convenience.

Refer to raytracing chapter of Vulkan API specification for more details.
|*RaytracingNVX* 2+|
| 5333 | *HitKindNVX* +
The hit kind of the hit for the ray being traced in the *AnyHitNVX* or
*ClosestHitNVX* execution models.

Refer to raytracing chapter of Vulkan API specification for more details.
|*RaytracingNVX* 2+|

|====
--

(Modify the definition of following BuiltIns, allowing them to be used in *IntersectionNVX*, *AnyHitNVX*, or *ClosestHitNVX* Execution Models.)::
+
--
[cols="1^.^,10,4^,10^",options="header",width = "100%"]
|====
2+^.^| BuiltIn| Enabling Capabilities | Enabled by Extension
.4+| 7 | *PrimitiveId* +
Primitive identifier. See Vulkan or OpenGL API specifications for more detail. | |
| Primitive ID in a *Geometry* Execution Model | *Geometry* |
| Primitive ID in a *Tessellation* Execution Model | *Tessellation* |
| Primitive ID in an *IntersectionNVX*, *AnyHitNVX*, or *ClosestHitNVX* Execution Model
| *RaytracingNVX*
| *SPV_NVX_ray_tracing*
.2+| 43 | *InstanceIndex* +
Instance index. See Vulkan or OpenGL API specifications for more detail. | *Shader* |
| Instance index in an *IntersectionNVX*, *AnyHitNVX*, or *ClosestHitNVX* Execution Model
| *RaytracingNVX*
| *SPV_NVX_ray_tracing*
|====

--


(Modify Section 3.31, Capability, adding a row to the Capability table) ::
+
--
[cols="1^.^,25,8^,15",options="header",width = "100%"]
|====
2+^.^| Capability | Depends On | Enabled by Extension
| 5340 | *RaytracingNVX* +
Uses the *RayGenerationNVX*, *IntersectionNVX*, *AnyHitNVX*, *ClosestHitNVX*,
*MissNVX*, or *CallableNVX* Execution Models
|  | *SPV_NVX_raytracing*
|====
--

(Modify Section 3.32.6, Type-Declaration Instructions, adding a new table) ::
+
--
[cols="5,1,1*3",width="100%"]
|=====
2+|[[OpTypeAccelerationStructureNVX]]*OpTypeAccelerationStructureNVX* +
 +
Declares an acceleration structure type which is an opaque reference to
acceleration structure handle as defined in raytracing chapter of Vulkan API
specification.

Consumed by *OpTraceNVX*

This type is opaque: values of this type have no defined physical size or
bit pattern.

1+|Capability: +
*RaytracingNVX*
| 2 | 5341 | '<id>' 'Result'
|=====
--

(Add a new sub section 3.32.24, Raytracing Instructions, adding to end of list of instructions) ::
+
--
[cols="1,1,11*3"]
|======
12+|[[OpTraceNVX]]*OpTraceNVX* +
 +
 Trace a ray into the acceleration structure. +
 +
 'Acceleration Structure' is the descriptor for the acceleration structure to trace into. +
 +
 'Ray Flags' controls the properties for the trace. See raytracing chapter of Vulkan API specification for more details. +
 +
 'Cull Mask' is the 8-bit mask for test against the instance mask. +
 +
 'SBT Offset' and 'SBT Stride' control indexing into the SBT for hit shaders called from this trace.
 'SBT' stands for Shader Binding Table. Refer to raytracing chapter of Vulkan API specification for details. +
 +
 'Miss Index' is the index of the miss shader to be called from this trace call. +
 +
 'Ray Origin', 'Ray Tmin', 'Ray Direction', and 'Ray Tmax' control the basic parameters of the ray to be traced. +
 +
 'Payload number' matches the declared location of the payload structure to use for this trace. +
 +
 'Ray Flags', 'Cull Mask', 'SBT Offset', 'SBT Stride', and 'Miss Index' must be a 32-bit 'integer type' scalar. +
 +
 'Ray Origin' and 'Ray Direction' must be a 32-bit 'float type' 3-component vector. +
 +
 'Ray Tmin' and 'Ray Tmax' must be a 32-bit 'float type' scalar. +
 +
 This instruction is allowed only in *RayGenerationNVX*, *ClosestHitNVX* and *MissNVX* execution models. +
 +
1+|Capability: +
*RaytracingNVX*
| 12 | 5337
| '<id> Acceleration Structure'
| '<id> Ray Flags'
| '<id>' 'Cull Mask'
| '<id>' 'SBT Offset'
| '<id>' 'SBT Stride'
| '<id>' 'Miss Index'
| '<id>' 'Ray Origin'
| '<id>' 'Ray Tmin'
| '<id>' 'Ray Direction'
| '<id>' 'Ray Tmax'
| '<id>' 'Payload number'
|======

[cols="1,1,4*3",width="100%"]
|=====
5+|[[OpReportIntersectionNVX]]*OpReportIntersectionNVX* +
 +
Reports an intersection back to the traversal infrastructure.

'Hit' is the floating point parametric value along ray for the intersection.

'Hit Kind' is the integer hit kind reported back to other shaders and accessible by the hit kind builtin.

'Result Type' must be a scalar boolean.

'Hit' must be a 32-bit 'float type' scalar.

'Hit Kind' must be a 32-bit 'unsigned integer type' scalar.

This instruction is allowed only in *IntersectionNVX* execution model.

1+|Capability: +
*RaytracingNVX*
| 5 | 5334 | '<id>' 'Result Type' | '<id>' 'Result' |  '<id>' 'Hit' | '<id>' 'Hit Kind'
|=====

[cols="1,1,0*3",width="100%"]
|=====
1+|[[OpIgnoreIntersectionNVX]]*OpIgnoreIntersectionNVX* +
 +
Ignores the current potential intersection.

This instruction is allowed only in *AnyHitNVX* execution model.

1+|Capability: +
*RaytracingNVX*
| 1 | 5335
|=====

[cols="1,1,0*3",width="100%"]
|=====
1+|[[OpTerminateRayNVX]]*OpTerminateRayNVX* +
 +
Terminates further traversal of a ray.

This instruction is allowed only in *AnyHitNVX* execution model.

1+|Capability: +
*RaytracingNVX*
| 1 | 5336
|=====
--


Validation Rules
----------------

An OpExtension must be added to the SPIR-V for validation layers to check
legal use of this extension:

----
OpExtension "SPV_NVX_raytracing"
----

Issues
------

None yet!

Revision History
----------------

[cols="5,15,15,70"]
[grid="rows"]
[options="header"]
|========================================
|Rev|Date|Author|Changes
|1 |2018-09-12 |Eric Werness|*Internal revisions*
|========================================

