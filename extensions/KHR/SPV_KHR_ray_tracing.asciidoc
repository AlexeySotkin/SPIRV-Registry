SPV_KHR_ray_tracing
===================

Name Strings
------------

SPV_KHR_ray_tracing

Contact
-------

See *Issues* list in the Khronos SPIRV-Headers repository:
https://github.com/KhronosGroup/SPIRV-Headers

Contributors
------------

- Eric Werness, NVIDIA
- Ashwin Lele, NVIDIA
- Daniel Koch, NVIDIA
- Tobias Hector, AMD
- Nicolai Haehnle, AMD
- David Neto, Google
- Alan Baker, Google
- John Kessenich, Google
- Joshua Barczak, Intel

Status
------

- Ratified (as provisional) by the Khronos Board 2020-01-24.

Provisional
~~~~~~~~~~~

This extension is *provisional* and should not be used in production
applications. The functionality may change in ways that break backwards
compatibility between revisions, and before final release.

Version
-------

[width="40%",cols="25,25"]
|========================================
| Last Modified Date | 2020-06-03
| Revision           | 15
|========================================

Dependencies
------------

This extension is written against the SPIR-V Specification,
Version 1.5 Revision 1.

This extension requires SPIR-V 1.4.

This extension interacts with SPV_KHR_ray_query.

Overview
--------

This extension adds new functionality to support the Vulkan
VK_KHR_ray_tracing extension in SPIR-V.

Extension Name
--------------

To use this extension within a SPIR-V module, the following
*OpExtension* must be present in the module:

----
OpExtension "SPV_KHR_ray_tracing"
----

New Execution Models
--------------------

This extension introduces new execution models:

----
RayGenerationKHR
IntersectionKHR
AnyHitKHR
ClosestHitKHR
MissKHR
CallableKHR
----

these depend on the *RayTracingProvisionalKHR* capability.


New Capabilities
----------------

This extension introduces new capabilities:

----
RayTracingProvisionalKHR
RayTraversalPrimitiveCullingProvisionalKHR
----

New Storage Classes
-------------------

Storage classes added under the *RayTracingProvisionalKHR* capability

----
RayPayloadKHR
IncomingRayPayloadKHR
HitAttributeKHR
CallableDataKHR
IncomingCallableDataKHR
ShaderRecordBufferKHR
----

New Builtins
------------

Builtins added under the *RayTracingProvisionalKHR* capability

----
LaunchIdKHR
LaunchSizeKHR
InstanceCustomIndexKHR
RayGeometryIndexKHR
WorldRayOriginKHR
WorldRayDirectionKHR
ObjectRayOriginKHR
ObjectRayDirectionKHR
RayTminKHR
RayTmaxKHR
ObjectToWorldKHR
WorldToObjectKHR
HitKindKHR
IncomingRayFlagsKHR
----

New Instructions
----------------

Instructions added under the *RayTracingProvisionalKHR* capability

----
OpReportIntersectionKHR
OpIgnoreIntersectionKHR
OpTerminateRayKHR
OpTraceRayKHR
OpTypeAccelerationStructureKHR
OpExecuteCallableKHR
----

Modifications to the SPIR-V Specification
-----------------------------------------

(Modify Section 2.2.1, Instructions ) ::
+
_Shader Call Instruction_: An instruction which may cause execution to
continue elsewhere by creating one or more invocations that execute
other shaders. The <<OpTraceRayKHR,*OpTraceRayKHR*>>,
<<OpExecuteCallableKHR,*OpExecuteCallableKHR*>>, and
<<OpReportIntersectionKHR,*OpReportIntersectionKHR*>> instructions are
shader call instructions.


(Modify Section 2.2.2, Types ) ::
+
add *OpTypeAccelerationStructureKHR* to list of opaque types

(Modify Section 2.16.1, Universal Validation Rules) ::
+
--
Change the second bullet under "Any pointer operand to an *OpFunctionCall* must be"
to include *OpTypeAccelerationStructureKHR*:

 * a pointer to an element in an array that is a memory object declaration,
   where the element type is *OpTypeSampler*, *OpTypeImage*, or
   *OpTypeAccelerationStructureKHR*.

Add a new bullet under "Data rules":

 * Instructions extracting a scalar acceleration structure out of a composite
   must only use _dynamically-uniform_ indexes, unless the index is decorated with
   NonUniformEXT. They must be in the same block in which their _Result <id>_
   are consumed. Such _Result <id>_ must not appear as operands to *OpPhi* or
   *OpSelect* instructions, or any instructions other than the ray tracing
   instructions specified to operate on them.

--


(Modify Section 3.3, Execution Model, adding rows to the Execution Model table) ::
+
--
[cols="1^,12,15",options="header",width = "80%"]
|====
2+^.^| Execution Model | Enabling Capabilities
| 5313 | *RayGenerationKHR* +
Ray generation shading stage.
| *RayTracingProvisionalKHR*
| 5314 | *IntersectionKHR*  +
Intersection shading stage.
| *RayTracingProvisionalKHR*
| 5315 | *AnyHitKHR* +
Any hit shading stage.
| *RayTracingProvisionalKHR*
| 5316 | *ClosestHitKHR* +
Closest hit shading stage.
| *RayTracingProvisionalKHR*
| 5317 | *MissKHR* +
Miss shading stage.
| *RayTracingProvisionalKHR*
| 5318 | *CallableKHR* +
Ray callable shading stage. +
| *RayTracingProvisionalKHR*
|====
--

(Modify Section 3.7, Storage Class, adding rows to the Storage Class table) ::
+
--
[cols="1^,15,2*2",options="header",width = "100%"]
|====
2+^.^| Storage Class | <<Capability,Enabling Capabilities>> | Enabled by Extension
| 5328 | *CallableDataKHR* +
Used for storing arbitrary data associated with a ray to pass to callables.
Visible across all functions in the current invocation. Not shared externally. Variables declared
with this storage class can be both read and written to, but cannot have initializers.
Only allowed in *RayGenerationKHR*, *ClosestHitKHR*, *CallableKHR*, and *MissKHR* execution models.
| *RayTracingProvisionalKHR* | SPV_KHR_ray_tracing
| 5329 | *IncomingCallableDataKHR* +
Used for storing arbitrary data from parent sent to current callable stage invoked from
*OpExecuteCallable*. Visible across all functions in current invocation. Not shared externally.
Variables declared with the storage class are allowed only in *CallableKHR* execution models.
Can be both read and written to in above execution models, but cannot have initializers.
| *RayTracingProvisionalKHR* | SPV_KHR_ray_tracing
| 5338 | *RayPayloadKHR* +
Used for storing payload data associated with a ray. Visible across all functions in
the current invocation. Not shared externally. Variables declared
with this storage class can be both read and written to, but cannot have initializers.
Only allowed in *RayGenerationKHR*, *AnyHitKHR*, *ClosestHitKHR* and *MissKHR* execution models.
| *RayTracingProvisionalKHR* | SPV_KHR_ray_tracing
| 5339 | *HitAttributeKHR* +
Used for storing attributes of geometry intersected by a ray. Visible across all
functions in the current invocation. Not shared externally. Variables declared with this
storage class are allowed only in *IntersectionKHR*, *AnyHitKHR* and *ClosestHitKHR* execution models.
They can be written to only in *IntersectionKHR* execution model and read from only
in *AnyHitKHR* and *ClosestHitKHR* execution models. They cannot have initializers.
| *RayTracingProvisionalKHR* | SPV_KHR_ray_tracing
| 5342 | *IncomingRayPayloadKHR* +
Used for storing parent payload data associated with a ray in current stage invoked from
a trace call. Visible across all functions in current invocation. Not shared externally.
Variables declared with the storage class are allowed only in *AnyHitKHR*, *ClosestHitKHR* and
*MissKHR* execution models. Can be both read and written to in above execution models, but
cannot have initializers.
| *RayTracingProvisionalKHR* | SPV_KHR_ray_tracing
| 5343 | *ShaderRecordBufferKHR* +
Used for storing data in shader record associated with each unique shader in ray_tracing
pipeline. Visible across all functions in current invocation. Can be initialized externally via API.
Variables declared with this storage class are allowed in *RayGenerationKHR*, *IntersectionKHR*,
*AnyHitKHR*, *ClosestHitKHR*, *MissKHR* and *CallableKHR* execution models and can be both read and written to
but cannot have initializers. Refer to the Ray Tracing chapter of Vulkan API specification for details on shader records.
| *RayTracingProvisionalKHR* | SPV_KHR_ray_tracing
|====
--

(Modify Section 3.21, Builtin, adding rows to the Builtin table) ::
+
--
[cols="1^,10,6^",options="header",width = "100%"]
|====
2+^.^| Decoration | <<Capability,Enabling Capabilities>>
| 5319 | *LaunchIdKHR* +
Index of work item being processed in current invocation of ray tracing shader stage.
Allowed in all ray tracing execution models.

Refer to the Ray Tracing chapter of Vulkan API specification for more details.
|*RayTracingProvisionalKHR*
| 5320 | *LaunchSizeKHR* +
Width and height dimensions passed to vkCmdTraceRaysKHR call which resulted in invocation of
current ray tracing shader stage. Allowed in all ray tracing execution models.

Refer to the Ray Tracing chapter of Vulkan API specification for more details.
|*RayTracingProvisionalKHR*
| 5321 | *WorldRayOriginKHR* +
World-space origin coordinates for the ray being traced in the *IntersectionKHR*,
*AnyHitKHR*, *ClosestHitKHR*, or *MissKHR* execution models.

Refer to the Ray Tracing chapter of Vulkan API specification for more details.
|*RayTracingProvisionalKHR*
| 5322 | *WorldRayDirectionKHR* +
World-space direction for the ray being traced in the *IntersectionKHR*,
*AnyHitKHR*, *ClosestHitKHR*, or *MissKHR* execution models.

Refer to the Ray Tracing chapter of Vulkan API specification for more details.
|*RayTracingProvisionalKHR*
| 5323 | *ObjectRayOriginKHR* +
Object-space origin coordinates for the ray being traced in the *IntersectionKHR*,
*AnyHitKHR*, or *ClosestHitKHR* execution models.

Refer to the Ray Tracing chapter of Vulkan API specification for more details.
|*RayTracingProvisionalKHR*
| 5324 | *ObjectRayDirectionKHR* +
Object-space direction for the ray being traced in the *IntersectionKHR*,
*AnyHitKHR*, or *ClosestHitKHR* execution models.

Refer to the Ray Tracing chapter of Vulkan API specification for more details.
|*RayTracingProvisionalKHR*
| 5325 | *RayTminKHR* +
The current *Tmin* parametric value for the ray being traced in the *IntersectionKHR*,
*AnyHitKHR*, *ClosestHitKHR*, or *MissKHR* execution models.

Refer to the Ray Tracing chapter of Vulkan API specification for more details.
|*RayTracingProvisionalKHR*
| 5326 | *RayTmaxKHR* +
The current *Tmax* parametric value for the ray being traced in the *IntersectionKHR*,
*AnyHitKHR*, *ClosestHitKHR*, or *MissKHR* execution models.

Refer to the Ray Tracing chapter of Vulkan API specification for more details.
|*RayTracingProvisionalKHR*
| 5327 | *InstanceCustomIndexKHR* +
Application specified value associated with the instance that was hit by the current ray in the *IntersectionKHR*,
*AnyHitKHR*, *ClosestHitKHR* execution models.

Refer to the Ray Tracing chapter of Vulkan API specification for more details.
|*RayTracingProvisionalKHR*
| 5330 | *ObjectToWorldKHR* +
The _4x3_ object to world transformation matrix for the ray being traced in the *IntersectionKHR*,
*AnyHitKHR*, or *ClosestHitKHR* execution models.

Refer to the Ray Tracing chapter of Vulkan API specification for more details.
|*RayTracingProvisionalKHR*
| 5331 | *WorldToObjectKHR* +
The _4x3_ world to object transformation matrix for the ray being traced in the *IntersectionKHR*,
*AnyHitKHR*, or *ClosestHitKHR* execution models.

Refer to the Ray Tracing chapter of Vulkan API specification for more details.
|*RayTracingProvisionalKHR*
| 5333 | *HitKindKHR* +
The hit kind of the hit for the ray being traced in the *AnyHitKHR* or
*ClosestHitKHR* execution models.

Refer to the Ray Tracing chapter of Vulkan API specification for more details.
|*RayTracingProvisionalKHR*
| 5351 | *IncomingRayFlagsKHR* +
The ray flags in current stage as passed in through trace call in parent. Available in *AnyHitKHR*,
*ClosestHitKHR*, *IntersectionKHR*, and *MissKHR* stage

Refer to the Ray Tracing chapter of Vulkan API specification for more details.
|*RayTracingProvisionalKHR*
| 5352 | *RayGeometryIndexKHR* +
Implementation defined index corresponding to the geometry that was hit by the current ray in the *IntersectionKHR*,
*AnyHitKHR*, or *ClosestHitKHR* execution models.

Refer to the Ray Tracing chapter of Vulkan API specification for more details.
|*RayTracingProvisionalKHR*

|====
--

(Modify the definition of following BuiltIns, allowing them to be used in *IntersectionKHR*, *AnyHitKHR*, or *ClosestHitKHR* Execution Models.)::
+
--
[cols="1^.^,10,4^,10^",options="header",width = "100%"]
|====
2+^.^| BuiltIn| Enabling Capabilities | Enabled by Extension
.3+| 6 | *InstanceId* +
Input Instance identifier. See the client API specifications
for more detail. | |
| Instance ID in a *Vertex* Execution Model| *Shader* |
| Instance ID in an *IntersectionKHR*, *AnyHitKHR*, or *ClosestHitKHR* Execution Model
| *RayTracingProvisionalKHR*
| *SPV_KHR_ray_tracing*
.4+| 7 | *PrimitiveId* +
Primitive identifier. See the client API specifications for more detail. | |
| Primitive ID in a *Geometry* Execution Model | *Geometry* |
| Primitive ID in a *Tessellation* Execution Model | *Tessellation* |
| Primitive ID in an *IntersectionKHR*, *AnyHitKHR*, or *ClosestHitKHR* Execution Model
| *RayTracingProvisionalKHR*
| *SPV_KHR_ray_tracing*
|====

--

(Modify Section 3.27, Scope <id>, adding a new row to the Scope table) ::
+
--
[cols="1^,20,1",options="header",width = "80%"]
|====
2+^.^| Scope | Enabling Capabilities
| 6 | *ShaderCallKHR* +
Scope is the set of invocations that are _shader-call-related_ in a ray tracing
Execution Model. Set the Vulkan API specification for details.
| *RayTracingProvisionalKHR*
|====

--

(Add a new sub-section 3.RF, Ray Flags, adding a new table) ::
+
--
[[ray_flags]]
*3.RF, Ray Flags*

Flags controlling the properties of an *OpTraceRayKHR* instruction
or for comparing against the *IncomingRayFlagsKHR* builtin.
See the Ray Tracing chapter of the Vulkan API specification for
more details.

Despite being a mask and allowing multiple bits to be combined,
it is invalid for more than one of these four bits to be set:
*OpaqueKHR*, *NoOpaqueKHR*, *CullOpaqueKHR*, *CullNoOpaqueKHR*.
Additionally, only one of *CullBackFacingTrianglesKHR* and
*CullFrontFacingTrianglesKHR* may be set.

[cols="1^,30,5",options="header",width = "100%"]
|====
2+^.^| Ray Flags | Enabling Capabilities
| 0 | *NoneKHR* +
No flags specified.
| *RayTracingProvisionalKHR*
| 1 | *OpaqueKHR*  +
Force all intersections with the trace to be opaque. +
See the Ray Opacity Culling section in the Vulkan API specification.
| *RayTracingProvisionalKHR*
| 2 | *NoOpaqueKHR* +
Force all intersections with the trace to be non-opaque. +
See the Ray Opacity Culling section in the Vulkan API specification.
| *RayTracingProvisionalKHR*
| 4 | *TerminateOnFirstHitKHR* +
Accept the first hit discovered. +
See the Ray Closest Hit Determination section in the Vulkan API specification.
| *RayTracingProvisionalKHR*
| 8 | *SkipClosestHitShaderKHR* +
Do not execute a closest hit shader. +
See the Ray Result Determination section in the Vulkan API specification.
| *RayTracingProvisionalKHR*
| 16 | *CullBackFacingTrianglesKHR* +
Do not intersect with the back face of triangles. +
See the Ray Face Culling section in the Vulkan API specification.
| *RayTracingProvisionalKHR*
| 32 | *CullFrontFacingTrianglesKHR* +
Do not intersect with the front face of triangles. +
See the Ray Face Culling section in the Vulkan API specification.
| *RayTracingProvisionalKHR*
| 64 | *CullOpaqueKHR* +
Do not intersect with opaque geometry. +
See the Ray Opacity Culling section in the Vulkan API specification.
| *RayTracingProvisionalKHR*
| 128 | *CullNoOpaqueKHR* +
Do not intersect with non-opaque geometry. +
See the Ray Opacity Culling section in the Vulkan API specification.
| *RayTracingProvisionalKHR*
| 256 | *SkipTrianglesKHR* +
Do not intersect with any triangle geometries.
See the Ray Primitive Culling section in the Vulkan API specification.
| *RayTraversalPrimitiveCullingProvisionalKHR*
| 512 | *SkipAABBsKHR* +
Do not intersect with any aabb geometries.
See the Ray Primitive Culling section in the Vulkan API specification.
| *RayTraversalPrimitiveCullingProvisionalKHR*
|====

--

(Add a new sub-section 3.HK, Hit Kinds, adding a new table) ::
+
--
[[hit_kinds]]
*3.HK, Hit Kinds*

Values returned in the variable decorated as *HitKindKHR* from built-in
intersections with triangle geometry.
See the Ray Face Culling section in the Vulkan API specification.

[cols="1^,12,15",options="header",width = "100%"]
|====
2+^.^| Hit Kind | Enabling Capabilities
| 0xFE | *HitKindFrontFacingTriangleKHR* +
The intersection was with front-facing geometry.
| *RayTracingProvisionalKHR*
| 0xFF | *HitKindBackFacingTriangleKHR* +
The intersection was with back-facing geometry.
| *RayTracingProvisionalKHR*
|====

--

(Modify Section 3.31, Capability, adding a row to the Capability table) ::
+
--
[cols="1^.^,25,15",options="header",width = "100%"]
|====
2+^.^| Capability | Implicitly Declares
| 5353 | *RayTracingProvisionalKHR* +
Uses the *RayGenerationKHR*, *IntersectionKHR*, *AnyHitKHR*, *ClosestHitKHR*,
*MissKHR*, or *CallableKHR* Execution Models
| *Shader*
| 4478 | *RayTraversalPrimitiveCullingProvisionalKHR* +
Uses *SkipAABBsKHR* or *SkipTrianglesKHR*
| *RayTracingProvisionalKHR*
|====
--

(Modify Section 3.32.6, Type-Declaration Instructions, adding a new table) ::
+
--
[cols="5,1,1*3",width="100%"]
|=====
2+|[[OpTypeAccelerationStructureKHR]]*OpTypeAccelerationStructureKHR* +
 +
Declares an acceleration structure type which is an opaque reference to
acceleration structure handle as defined in the Ray Tracing chapter of Vulkan API
specification.

Consumed by <<OpTraceRayKHR,*OpTraceRayKHR*>>

This type is opaque: values of this type have no defined physical size or
bit pattern.

1+|Capability: +
*RayTracingProvisionalKHR*
| 2 | 5341 | '<id>' 'Result'
|=====
--

(Add a new sub section 3.32.RT, Ray Tracing Instructions, adding to end of list of instructions) ::
+
--

[cols="1,1,11*3"]
|======
12+|[[OpTraceRayKHR]]*OpTraceRayKHR* +
 +
 Trace a ray into the acceleration structure. +
 +
 'Acceleration Structure' is the descriptor for the acceleration structure to trace into. +
 +
 'Ray Flags' contains one or more of the <<ray_flags, Ray Flag>> values. +
 +
 'Cull Mask' is the 8-bit mask for test against the instance mask. +
 +
 'SBT Offset' and 'SBT Stride' control indexing into the SBT for hit shaders called from this trace.
 'SBT' stands for Shader Binding Table. Refer to the Ray Tracing chapter of Vulkan API specification for details. +
 +
 'Miss Index' is the index of the miss shader to be called from this trace call. +
 +
 'Ray Origin', 'Ray Tmin', 'Ray Direction', and 'Ray Tmax' control the basic parameters of the ray to be traced. +
 +
 'Payload number' matches the declared location of the payload structure to use for this trace. +
 +
 'Ray Flags', 'Cull Mask', 'SBT Offset', 'SBT Stride', and 'Miss Index' must be a 32-bit 'integer type' scalar. +
 +
 'Ray Origin' and 'Ray Direction' must be a 32-bit 'float type' 3-component vector. +
 +
 'Ray Tmin' and 'Ray Tmax' must be a 32-bit 'float type' scalar. +
 +
 'Payload number' must be a 32-bit 'integer type' scalar and must be the <id> of a constant instruction. +
 +
 This instruction is allowed only in *RayGenerationKHR*, *ClosestHitKHR* and *MissKHR* execution models. +
 +
 This instruction is a _shader call instruction_ which may invoke shaders with the *IntersectionKHR*, *AnyHitKHR*,
*ClosestHitKHR*, and *MissKHR* execution models. +
 +
1+|Capability: +
*RayTracingProvisionalKHR*
| 12 | 5337
| '<id> Acceleration Structure'
| '<id> Ray Flags'
| '<id>' 'Cull Mask'
| '<id>' 'SBT Offset'
| '<id>' 'SBT Stride'
| '<id>' 'Miss Index'
| '<id>' 'Ray Origin'
| '<id>' 'Ray Tmin'
| '<id>' 'Ray Direction'
| '<id>' 'Ray Tmax'
| '<id>' 'Payload number'
|======

[cols="1,1,4*3",width="100%"]
|=====
5+|[[OpReportIntersectionKHR]]*OpReportIntersectionKHR* +
 +
Reports an intersection back to the traversal infrastructure.

'Hit' is the floating point parametric value along ray for the intersection.

'Hit Kind' is the integer hit kind reported back to other shaders and accessible by the hit kind builtin.

'Result Type' must be a scalar boolean.

'Hit' must be a 32-bit 'float type' scalar.

'Hit Kind' must be a 32-bit 'unsigned integer type' scalar.

This instruction is allowed only in *IntersectionKHR* execution model.

This instruction is a _shader call instruction_ which may invoke shaders with the
*AnyHitKHR* execution model.

1+|Capability: +
*RayTracingProvisionalKHR*
| 5 | 5334 | '<id>' 'Result Type' | '<id>' 'Result' |  '<id>' 'Hit' | '<id>' 'Hit Kind'
|=====

[cols="1,1,0*3",width="100%"]
|=====
1+|[[OpIgnoreIntersectionKHR]]*OpIgnoreIntersectionKHR* +
 +
Ignores the current potential intersection.

This instruction is allowed only in *AnyHitKHR* execution model.

1+|Capability: +
*RayTracingProvisionalKHR*
| 1 | 5335
|=====

[cols="1,1,0*3",width="100%"]
|=====
1+|[[OpTerminateRayKHR]]*OpTerminateRayKHR* +
 +
Terminates further traversal of a ray.

This instruction is allowed only in *AnyHitKHR* execution model.

1+|Capability: +
*RayTracingProvisionalKHR*
| 1 | 5336
|=====

[cols="1,1,2*2",width="100%"]
|=====
3+|[[OpExecuteCallableKHR]]*OpExecuteCallableKHR* +
 +
Invoke a callable shader

'SBT Index' is the index into the SBT table to select callable shader to execute

'Callable Data Number' matches the declared location of the callable data to pass into through this call

This instruction is allowed only in *RayGenerationKHR*, *ClosestHitKHR*, *MissKHR* and *CallableKHR* execution models.

This instruction is a _shader call instruction_ which will invoke a shader with the
*CallableKHR* execution model.

1+|Capability: +
*RayTracingProvisionalKHR*
| 3 | 5344 | '<id>' 'SBT Index' | '<id>' 'Callable Data Number'
|=====
--


Validation Rules
----------------

An OpExtension must be added to the SPIR-V for validation layers to check
legal use of this extension:

----
OpExtension "SPV_KHR_ray_tracing"
----

Interactions with SPV_KHR_ray_query
-----------------------------------

*OpTypeAccelerationStructureKHR*, *RayTraversalPrimitiveCullingProvisionalKHR*, and the
`Ray Flags` are added by both this extension and `SPV_KHR_ray_query`; they
are intended to have identical definitions, and can be enabled by either
extension's capability, for use with the instructions under that same
capability.

Issues
------

1) Should the global variables be listed in the entrypoint interface?

Discussion: This makes the consumer lives easier in the presence of multiple
entry points.  This is already required in SPIR-V 1.4, but if using an earlier
version of SPIR-V it is actually *illegal*.

Resolved: Require SPIR-V 1.4 to make it simpler for consumers.
SPV_NV_ray_tracing needs to work both ways since it pre-dates SPIR-V 1.4, but
implementations which only support SPV_KHR_ray_tracing will benefit from
this requirement.

Revision History
----------------

[cols="5,15,15,70"]
[grid="rows"]
[options="header"]
|========================================
|Rev|Date|Author|Changes
|1 |2019-04-30 |Daniel Koch   | Fork from SPV_NV_ray_tracing rev 4.
|2 |2019-04-30 |Daniel Koch   | Add Ray Flags documentation.
|3 |2019-06-20 |Tobias Hector | Add RayGeometryIndexKHR.
|4 |2019-10-25 |Tobias Hector | Add description to ray flags.
|5 |2019-11-20 |Daniel Koch   | OpTraceKHR -> OpTraceRayKHR.
                                Add references to API spec for ray flags.
                                Add Hit Kind documentation.
|6 |2019-11-25 |Daniel Koch   | Add ShaderCallKHR scope.
                                Document payload for OpTraceRayKHR.
|7 |2019-11-27 |Daniel Koch   | Disallow initializers on all new storage classes.
|8 |2019-12-03 |Tobias Hector | Add interactions with SPV_KHR_ray_query.
|9 |2019-12-05 |Tobias Hector | Add RayTraversalPrimitiveCullingProvisionalKHR capability
                                and the SkipAABBsKHR/SkipTrianglesKHR ray flags.
|10|2019-12-05 |Daniel Koch   | Base on SPIR-V 1.5
|11|2019-12-11 |Daniel Koch   | add Provisional string to capabilities, and reassign token
                                for RayTracingProvisionalKHR.
|12|2020-02-20 |Eric Werness  | Miss does not have object parameters.
|13|2020-02-22 |Tobias Hector | Removed HitTKHR alias of RayTmaxKHR
|14|2020-04-22 |Daniel Koch   | Require SPIR-V 1.4.
|15|2020-06-03 |Daniel Koch   | Update capabilities tables to match SPIR-V 1.5.
|========================================

